plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.147'
}

version = mod_version
group = mod_group_id

repositories {
    // Correct repository for spark
    maven { url "https://repo.lucko.me/" }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    data {
        workingDirectory project.file('run-data')
        args.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
    }

    server {
        workingDirectory project.file('run-server')
        args.add '--nogui'
    }

    client {
        workingDirectory project.file('run-client')
    }

    gameTestServer {
        workingDirectory project.file('run-gametestserver')
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    // Correct dependency declaration for spark API
    compileOnly "me.lucko:spark-api:1.10"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    // Add the required Java module for the lightweight HTTP server
    options.compilerArgs.addAll(['--add-modules', 'jdk.httpserver'])
}